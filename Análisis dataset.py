# -*- coding: utf-8 -*-
"""PROYECTO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OiWsqfZ_RSJfBDPDlJ9H-GWzYDRHtSNw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import warnings
import re

warnings.filterwarnings('ignore')
print("✅ Librerías importadas correctamente")

# Cargar el archivo CSV
try:
    df = pd.read_csv('/content/social_media_usage.csv')
    print("✅ Archivo cargado exitosamente")
except FileNotFoundError:
    print("❌ Archivo no encontrado. Subiendo archivo...")
    from google.colab import files
    uploaded = files.upload()
    filename = list(uploaded.keys())[0]
    df = pd.read_csv(filename)
    print(f"✅ Archivo '{filename}' cargado exitosamente")

print(f"📏 Dimensiones: {df.shape[0]} filas × {df.shape[1]} columnas")

# EXPLORACIÓN INICIAL - IDENTIFICAR PROBLEMAS
print("🔍 EXPLORACIÓN INICIAL DEL DATASET")
print("=" * 50)

# Información básica
print(f"📊 Dimensiones: {df.shape[0]} filas x {df.shape[1]} columnas")

# Análisis de valores faltantes
valores_faltantes = df.isnull().sum()
print(f"\n❓ VALORES FALTANTES POR COLUMNA:")
for columna, cantidad in valores_faltantes.items():
    if cantidad > 0:
        porcentaje = (cantidad / len(df)) * 100
        print(f"   ❌ {columna}: {cantidad} ({porcentaje:.1f}%)")
    else:
        print(f"   ✅ {columna}: {cantidad}")

print(f"\n📊 Total de valores faltantes: {valores_faltantes.sum()}")

# Otros problemas detectados
cadenas_vacias = (df.astype(str) == '').sum().sum()
print(f"📝 Cadenas vacías detectadas: {cadenas_vacias}")

print("\n📋 Información detallada:")
df.info()

# # PASO 1: LIMPIEZA DE VALORES FALTANTES
# print("🧹 LIMPIEZA DE VALORES FALTANTES")
# print("=" * 50)

# # Crear copia para limpieza
# df_limpio = df.copy()

# print(f"📋 Antes: {df_limpio.isnull().sum().sum()} valores faltantes")

# # Estandarizar valores faltantes
# df_limpio = df_limpio.replace(['', ' ', 'nan', 'None'], np.nan)

# # Rellenar por tipo de columna
# df_limpio['Nombre'] = df_limpio['Nombre'].fillna('Sin Nombre')
# df_limpio['Email'] = df_limpio['Email'].fillna('sin.email@pendiente.com')
# df_limpio['Teléfono'] = df_limpio['Teléfono'].fillna('Sin teléfono')

# # Edades: convertir a numérico y rellenar con mediana
# df_limpio['Edad'] = pd.to_numeric(df_limpio['Edad'], errors='coerce')
# mediana_edad = df_limpio['Edad'].median()
# df_limpio['Edad'] = df_limpio['Edad'].fillna(mediana_edad)
# print(f"   ✅ Edades rellenadas con mediana: {mediana_edad}")

# # Calificaciones: rellenar con promedio
# df_limpio['Calificación'] = pd.to_numeric(df_limpio['Calificación'], errors='coerce')
# promedio_calif = df_limpio['Calificación'].mean()
# df_limpio['Calificación'] = df_limpio['Calificación'].fillna(promedio_calif)
# print(f"   ✅ Calificaciones rellenadas con promedio: {promedio_calif:.1f}")

# print(f"\n📋 Después: {df_limpio.isnull().sum().sum()} valores faltantes")
# print("✅ Limpieza de valores faltantes completada")

df

# PASO 2: LIMPIEZA DE DATOS DE TEXTO
print("🔤 LIMPIEZA DE DATOS DE TEXTO")
print("=" * 50)
#  Crear copia para limpieza
df_limpio = df.copy()
# NOMBRES
print("📋 Nombres ANTES:")
for i, nombre in enumerate(df_limpio['User_ID'], 1):
    print(f"   {i:2d}. '{nombre}'")

# Limpiar nombres
df_limpio['User_ID'] = (df_limpio['User_ID'].astype(str)
                       .str.strip()
                       .str.replace(r'\s+', ' ', regex=True)
                       .str.title())

print("\n📋 Nombres DESPUÉS:")
for i, nombre in enumerate(df_limpio['User_ID'], 1):
    print(f"   {i:2d}. '{nombre}'")

print("\n✅ Nombres estandarizados a formato Título")

# # PASO 3: LIMPIEZA DE EMAILS
# print("📧 LIMPIEZA DE EMAILS")
# print("=" * 50)

# print("📋 Emails ANTES:")
# for i, email in enumerate(df_limpio['Email'], 1):
#     print(f"   {i:2d}. '{email}'")

# # Limpiar emails
# df_limpio['Email'] = df_limpio['Email'].str.lower().str.strip()

# # Validar emails con patrón
# patron_email = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
# for i in range(len(df_limpio)):
#     email = df_limpio['Email'].iloc[i]
#     if not re.match(patron_email, str(email)) and 'pendiente' not in str(email):
#         df_limpio['Email'].iloc[i] = f"{email}.REVISAR@pendiente.com"

# print("\n📋 Emails DESPUÉS:")
# for i, email in enumerate(df_limpio['Email'], 1):
#     if 'REVISAR' in email:
#         print(f"   {i:2d}. '{email}' ⚠️ NECESITA REVISIÓN")
#     else:
#         print(f"   {i:2d}. '{email}' ✅")

# emails_revisar = df_limpio['Email'].str.contains('REVISAR').sum()
# print(f"\n📊 Emails que necesitan revisión: {emails_revisar}")
# print("✅ Emails procesados")

# RESULTADOS FINALES Y COMPARACIÓN
print("📊 RESUMEN FINAL DE LA LIMPIEZA")
print("=" * 70)

# Comparación antes vs después
print("🔄 COMPARACIÓN ANTES VS DESPUÉS:")
valores_antes = df.isnull().sum().sum()
valores_despues = df_limpio.isnull().sum().sum()

print(f"📊 Registros: {len(df)} → {len(df_limpio)}")
print(f"📊 Columnas: {len(df.columns)} → {len(df_limpio.columns)}")
print(f"❓ Valores faltantes: {valores_antes} → {valores_despues}")
print(f"📈 Valores corregidos: {valores_antes - valores_despues}")

print(f"\n📋 CAMBIOS POR COLUMNA:")
for columna in df_limpio.columns:
    antes = df[columna].isnull().sum()
    despues = df_limpio[columna].isnull().sum()
    print(f"   {columna}: {antes} → {despues} faltantes")

# Mostrar dataset final
print(f"\n🎯 DATASET FINAL LIMPIO:")
display(df_limpio)

# Estadísticas finales
print(f"\n🎉 ESTADÍSTICAS FINALES:")
print(f"✅ Total de registros: {len(df_limpio)}")
print(f"✅ Total de columnas: {len(df_limpio.columns)}")
print(f"✅ Valores faltantes: {df_limpio.isnull().sum().sum()}")
completitud = ((df_limpio.size - df_limpio.isnull().sum().sum()) / df_limpio.size * 100)
print(f"✅ Completitud: {completitud:.1f}%")

print(f"\n📋 Información del dataset limpio:")
df_limpio.info()

# GUARDAR DATASET Y CONSEJOS FINALES
print("💾 GUARDANDO DATASET LIMPIO")
print("=" * 50)

# Guardar archivos
try:
    fecha = datetime.now().strftime('%Y%m%d_%H%M')

    # Guardar CSV
    nombre_csv = f'dataset_limpio_{fecha}.csv'
    df_limpio.to_csv(nombre_csv, index=False, encoding='utf-8')
    print(f"✅ CSV guardado: {nombre_csv}")

    # Guardar Excel
    nombre_excel = f'dataset_limpio_{fecha}.xlsx'
    df_limpio.to_excel(nombre_excel, index=False)
    print(f"✅ Excel guardado: {nombre_excel}")

    # Crear reporte
    nombre_reporte = f'reporte_limpieza_{fecha}.txt'
    with open(nombre_reporte, 'w', encoding='utf-8') as f:
        f.write(f"REPORTE DE LIMPIEZA DE DATOS\n")
        f.write(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n")
        f.write(f"Dataset original: {df.shape[0]} filas, {df.shape[1]} columnas\n")
        f.write(f"Dataset limpio: {df_limpio.shape[0]} filas, {df_limpio.shape[1]} columnas\n")
        f.write(f"Valores corregidos: {valores_antes - valores_despues}\n")
        f.write(f"\nProcesos aplicados:\n")
        f.write(f"- Estandarización de valores faltantes\n")
        f.write(f"- Limpieza de texto (nombres y emails)\n")
        f.write(f"- Validación de datos numéricos\n")
        f.write(f"- Normalización de fechas\n")
        f.write(f"- Formato de números de teléfono\n")
        f.write(f"\n¡Dataset listo para análisis!\n")

    print(f"✅ Reporte guardado: {nombre_reporte}")
    print("\n📁 Para descargar: Carpeta (panel izquierdo) → Clic derecho → Descargar")

except Exception as e:
    print(f"⚠️ Error al guardar: {e}")

print(f"\n🎓 ¡FELICITACIONES!")
print("=" * 50)
print("✅ Has completado la limpieza de datos exitosamente")
print("✅ Tu dataset está listo para análisis")
print("✅ Ahora puedes aplicar estas técnicas a tus propios datos")

print(f"\n🚀 PRÓXIMOS PASOS SUGERIDOS:")
print("1. 📊 Análisis exploratorio de datos (EDA)")
print("2. 📈 Crear visualizaciones para entender patrones")
print("3. 🔍 Buscar correlaciones entre variables")
print("4. 🤖 Aplicar técnicas de machine learning")
print("5. 📋 Generar reportes y conclusiones")

print(f"\n📚 RECURSOS PARA SEGUIR APRENDIENDO:")
print("🌐 Documentación oficial de Pandas")
print("📖 Kaggle Learn: Data Cleaning Course")
print("🎥 YouTube: Tutoriales de Python para análisis de datos")
print("📝 Práctica con datasets reales en Kaggle")

print(f"\n💡 PARA CARGAR TUS PROPIOS DATOS:")
print("# Cargar CSV: df = pd.read_csv('tu_archivo.csv')")
print("# Cargar Excel: df = pd.read_excel('tu_archivo.xlsx')")
print("# Luego aplica las mismas técnicas de limpieza")

print(f"\n🌟 ¡El mundo de los datos te espera!")
print("💪 Ahora tienes las habilidades para limpiar cualquier dataset")
print("🎉 ¡Has completado el manual de limpieza de datos!")